" Enable nocompatible
if has('vim_starting')
    if &compatible
        set nocompatible
    endif
endif

" Fsep && Psep
if has('win16') || has('win32') || has('win64')
    let s:Psep = ';'
    let s:Fsep = '\'
else
    let s:Psep = ':'
    let s:Fsep = '/'
endif

let g:Vimrc_Home                       = fnamemodify(expand('<sfile>'), ':p:h:gs?\\?'. s:Fsep. '?')
fu! s:source_script(path)
    execute 'source ' . g:Vimrc_Home . s:Fsep . a:path
endf

call s:source_script('functions.vim')

call s:source_script('init.vim')

scriptencoding utf-8


" Enable 256 colors
if $COLORTERM == 'gnome-terminal'
    set t_Co=256
endif

"Vim settings
let g:settings                         = {}
let g:settings.default_indent          = 2
let g:settings.max_column              = 120
let g:settings.auto_download_neobundle = 0
let g:settings.neobundle_installed     = 0
let g:settings.dein_installed     = 0
let g:settings.vim_plug_installed     = 0
let g:settings.plugin_bundle_dir       = join(['~/.cache','vimfiles',''],s:Fsep)
let g:settings.autocomplete_method     = ''
let g:settings.enable_cursorcolumn     = 0
let g:settings.enable_neomake          = 0
let g:settings.enable_ycm              = 0
let g:settings.enable_neocomplcache    = 0
let g:settings.enable_cursorline       = 0
let g:settings.use_colorscheme         = 1
let g:settings.vim_help_language       = 'en'
let g:settings.colorscheme             = 'gruvbox'
let g:settings.colorscheme_default     = 'desert'
let g:settings.filemanager             = 'vimfiler'
let g:settings.plugin_manager          = 'neobundle'  " neobundle or dein or vim-plug
let g:settings.plugin_groups_exclude   = []


"core vimrc
let g:settings.plugin_groups = []
call add(g:settings.plugin_groups, 'web')
call add(g:settings.plugin_groups, 'javascript')
call add(g:settings.plugin_groups, 'ruby')
call add(g:settings.plugin_groups, 'python')
call add(g:settings.plugin_groups, 'scala')
call add(g:settings.plugin_groups, 'go')
call add(g:settings.plugin_groups, 'scm')
call add(g:settings.plugin_groups, 'editing')
call add(g:settings.plugin_groups, 'indents')
call add(g:settings.plugin_groups, 'navigation')
call add(g:settings.plugin_groups, 'misc')

call add(g:settings.plugin_groups, 'core')
call add(g:settings.plugin_groups, 'unite')
call add(g:settings.plugin_groups, 'ctrlp')
call add(g:settings.plugin_groups, 'autocomplete')
if ! has('nvim')
    call add(g:settings.plugin_groups, 'vim')
else
    call add(g:settings.plugin_groups, 'nvim')
endif


if g:settings.vim_help_language == 'cn'
    call add(g:settings.plugin_groups, 'chinese')
endif
if g:settings.use_colorscheme==1
    call add(g:settings.plugin_groups, 'colorscheme')
endif
if OSX()
    call add(g:settings.plugin_groups, 'osx')
endif
if WINDOWS()
    call add(g:settings.plugin_groups, 'windows')
endif
if LINUX()
    call add(g:settings.plugin_groups, 'linux')
endif

if has('nvim')
    let g:settings.autocomplete_method = 'deoplete'
elseif has('lua')
    let g:settings.autocomplete_method = 'neocomplete'
else
    let g:settings.autocomplete_method = 'neocomplcache'
endif
if g:settings.enable_ycm
    let g:settings.autocomplete_method = 'ycm'
endif
if g:settings.enable_neocomplcache
    let g:settings.autocomplete_method = 'neocomplcache'
endif

for s:group in g:settings.plugin_groups_exclude
    let s:i = index(g:settings.plugin_groups, s:group)
    if s:i != -1
        call remove(g:settings.plugin_groups, s:i)
    endif
endfor

" python host for neovim
let g:python_host_prog = '/usr/bin/python'
let g:python3_host_prog = '/usr/bin/python3'

" auto install plugin manager
if g:settings.plugin_manager == 'neobundle'
    "auto install neobundle
    if filereadable(expand(g:settings.plugin_bundle_dir) . 'neobundle.vim'. s:Fsep. 'README.md')
        let g:settings.neobundle_installed = 1
    else
        if executable('git')
            exec '!git clone https://github.com/Shougo/neobundle.vim ' . g:settings.plugin_bundle_dir . 'neobundle.vim'
            let g:settings.neobundle_installed = 1
        else
            echohl WarningMsg | echom "You need install git!" | echohl None
        endif
    endif
    exec 'set runtimepath+='.g:settings.plugin_bundle_dir . 'neobundle.vim'
elseif g:settings.plugin_manager == 'dein'
    "auto install dein
    if filereadable(expand(g:settings.plugin_bundle_dir) . 'dein.vim'. s:Fsep. 'README.md')
        let g:settings.dein_installed = 1
    else
        if executable('git')
            exec '!git clone https://github.com/Shougo/dein.vim ' . g:settings.plugin_bundle_dir . 'dein.vim'
            let g:settings.dein_installed = 1
        else
            echohl WarningMsg | echom "You need install git!" | echohl None
        endif
    endif
    exec 'set runtimepath+='.g:settings.plugin_bundle_dir . 'dein.vim'
elseif g:settings.plugin_manager == 'vim-plug'
    "auto install vim-plug
    if filereadable(expand('~/.cache/vim-plug/autoload/plug.vim'))
        let g:settings.dein_installed = 1
    else
        if executable('curl')
            exec '!curl -fLo ~/.cache/vim-plug/autoload/plug.vim --create-dirs '
                        \. 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
            let g:settings.dein_installed = 1
        else
            echohl WarningMsg | echom "You need install curl!" | echohl None
        endif
    endif
    exec 'set runtimepath+=~/.cache/vim-plug/'
endif

"init manager func

fu! s:begin(path)
    if g:settings.plugin_manager == 'neobundle'
        call neobundle#begin(a:path)
    elseif g:settings.plugin_manager == 'dein'
        call dein#begin(a:path)
    elseif g:settings.plugin_manager == 'vim-plug'
        call plug#begin(a:path)
    endif
endf

fu! s:end()
    if g:settings.plugin_manager == 'neobundle'
        call neobundle#end()
        NeoBundleCheck
    elseif g:settings.plugin_manager == 'dein'
        call dein#end()
    elseif g:settings.plugin_manager == 'vim-plug'
        call plug#end()
    endif
endf

fu! s:parser(args)
endf

fu! s:add(repo,...)
    if g:settings.plugin_manager == 'neobundle'
        exec 'NeoBundle "'.a:repo.'"'.','.join(a:000,',')
    elseif g:settings.plugin_manager == 'dein'
        call dein#add(a:repo)
    endif
endf

fu! s:lazyadd(repo,...)
    if g:settings.plugin_manager == 'neobundle'
        exec 'NeoBundleLazy "'.a:repo.'"'.','.join(a:000,',')
    elseif g:settings.plugin_manager == 'dein'
        call dein#add(a:repo)
    endif
endf
fu! s:tap(plugin)
    if g:settings.plugin_manager == 'neobundle'
        return neobundle#tap(a:plugin)
    elseif g:settings.plugin_manager == 'dein'
        return dein#tap(a:plugin)
    endif
endf
fu! s:get_hooks(plugin)
    if g:settings.plugin_manager == 'neobundle'
        return neobundle#get_hooks(a:plugin)
    elseif g:settings.plugin_manager == 'dein'
        return dein#get_hooks(a:plugin)
    endif
endf

fu! s:defind_hooks(bundle)
    if g:settings.plugin_manager == 'neobundle'
            let s:hooks = s:get_hooks(a:bundle)
            func! s:hooks.on_source(bundle) abort
                call s:source_script('plugins/' . split(a:bundle['name'],'\.')[0] . '.vim')
            endf
    elseif g:settings.plugin_manager == 'dein'
        return dein#get_hooks(a:plugin)
    endif
endf
fu! s:fetch()
    if g:settings.plugin_manager == 'neobundle'
        NeoBundleFetch 'Shougo/neobundle.vim'
    elseif g:settings.plugin_manager == 'dein'
        call dein#add('Shougo/dein.vim', {'rtp': ''})
    endif
endf

fu! s:enable_plug()
    return g:settings.neobundle_installed || g:settings.dein_installed || (g:settings.vim_plug_installed && 0)
endf

"plugins and config
if s:enable_plug()
    call s:begin(g:settings.plugin_bundle_dir)
    call s:fetch()
    if count(g:settings.plugin_groups, 'core') "{{{
        call s:add('Shougo/vimproc.vim', {
                    \ 'build'   : {
                    \ 'windows' : 'tools\\update-dll-mingw',
                    \ 'cygwin'  : 'make -f make_cygwin.mak',
                    \ 'mac'     : 'make -f make_mac.mak',
                    \ 'linux'   : 'make',
                    \ 'unix'    : 'gmake',
                    \ },
                    \ })
    endif
    if count(g:settings.plugin_groups, 'unite') "{{{
        call s:add('Shougo/unite.vim')
        if s:tap('unite.vim')
            call s:defind_hooks('unite.vim')
        endif
        call s:add('Shougo/neoyank.vim')
        call s:add('soh335/unite-qflist')
        call s:add('ujihisa/unite-equery')
        call s:add('m2mdas/unite-file-vcs')
        call s:add('Shougo/neomru.vim')
        call s:add('kmnk/vim-unite-svn')
        call s:add('basyura/unite-rails')
        call s:add('nobeans/unite-grails')
        call s:add('choplin/unite-vim_hacks')
        call s:add('mattn/webapi-vim')
        call s:add('mattn/wwwrenderer-vim')
        call s:add('thinca/vim-openbuf')
        call s:add('ujihisa/unite-haskellimport')
        call s:add('oppara/vim-unite-cake')
        call s:add('thinca/vim-ref')
        if s:tap('vim-ref')
            call s:defind_hooks('vim-ref')
        endif
        call s:add('heavenshell/unite-zf')
        call s:add('heavenshell/unite-sf2')
        call s:add('Shougo/unite-outline')
        call s:add('hewes/unite-gtags')
        if s:tap('unite-gtags')
            call s:defind_hooks('unite-gtags')
        endif
        call s:add('rafi/vim-unite-issue')
        call s:add('tsukkee/unite-tag')
        call s:add('ujihisa/unite-launch')
        call s:add('ujihisa/unite-gem')
        call s:add('osyo-manga/unite-filetype')
        call s:add('thinca/vim-unite-history')
        call s:add('Shougo/neobundle-vim-recipes')
        call s:add('Shougo/unite-help')
        call s:add('ujihisa/unite-locate')
        call s:add('kmnk/vim-unite-giti')
        call s:add('ujihisa/unite-font')
        call s:add('t9md/vim-unite-ack')
        call s:add('mileszs/ack.vim')
        call s:add('albfan/ag.vim')
        let g:ag_prg="ag  --vimgrep"
        let g:ag_working_path_mode="r"
        call s:add('dyng/ctrlsf.vim')
        if s:tap('ctrlsf.vim')
            call s:defind_hooks('ctrlsf.vim')
        endif
        call s:add('daisuzu/unite-adb')
        call s:add('osyo-manga/unite-airline_themes')
        call s:add('mattn/unite-vim_advent-calendar')
        call s:add('mattn/unite-remotefile')
        call s:add('sgur/unite-everything')
        call s:add('kannokanno/unite-dwm')
        call s:add('raw1z/unite-projects')
        call s:add('voi/unite-ctags')
        call s:add('Shougo/unite-session')
        call s:add('osyo-manga/unite-quickfix')
        call s:add('Shougo/vimfiler.vim')
        if s:tap('vimfiler.vim')
            call s:defind_hooks('vimfiler.vim')
        endif
        call s:add('mopp/googlesuggest-source.vim')
        call s:add('mattn/googlesuggest-complete-vim')
        call s:add('ujihisa/unite-colorscheme')
        call s:add('mattn/unite-gist')
        call s:add('tacroe/unite-mark')
        call s:add('tacroe/unite-alias')
        call s:add('tex/vim-unite-id')
        call s:add('sgur/unite-qf')
        call s:lazyadd('lambdalisue/unite-grep-vcs', {
                    \ 'autoload': {
                    \    'unite_sources': ['grep/git', 'grep/hg'],
                    \}})
        call s:add('klen/unite-radio.vim')
        "call s:add('ujihisa/quicklearn')
    endif "}}}


    "{{{ctrlpvim settings
    if count(g:settings.plugin_groups, 'ctrlp') "{{{
        call s:add('ctrlpvim/ctrlp.vim')
        if s:tap('ctrlp.vim')
            call s:defind_hooks('ctrlp.vim')
        endif
        call s:add('felixSchl/ctrlp-unity3d-docs')
        call s:add('voronkovich/ctrlp-nerdtree.vim')
        call s:add('elentok/ctrlp-objects.vim')
        call s:add('h14i/vim-ctrlp-buftab')
        call s:add('vim-scripts/ctrlp-cmdpalette')
        call s:add('mattn/ctrlp-windowselector')
        call s:add('the9ball/ctrlp-gtags')
        call s:add('thiderman/ctrlp-project')
        call s:add('mattn/ctrlp-google')
        call s:add('ompugao/ctrlp-history')
        call s:add('pielgrzym/ctrlp-sessions')
        call s:add('tacahiroy/ctrlp-funky')
        call s:add('brookhong/k.vim')
        call s:add('mattn/ctrlp-launcher')
        call s:add('sgur/ctrlp-extensions.vim')
        call s:add('FelikZ/ctrlp-py-matcher')
        call s:add('JazzCore/ctrlp-cmatcher')
        call s:add('ompugao/ctrlp-z')
    endif "}}}


    if count(g:settings.plugin_groups, 'autocomplete') "{{{
        call s:add('honza/vim-snippets')
        imap <silent><expr><TAB> MyTabfunc()
        smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
        inoremap <silent> <CR> <C-r>=MyEnterfunc()<Cr>
        inoremap <silent> <Leader><Tab> <C-r>=MyLeaderTabfunc()<CR>
        inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
        inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
        inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
        inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
        if g:settings.autocomplete_method == 'ycm' "{{{
            call s:add('SirVer/ultisnips')
            let g:UltiSnipsExpandTrigger="<tab>"
            let g:UltiSnipsJumpForwardTrigger="<tab>"
            let g:UltiSnipsJumpBackwardTrigger="<S-tab>"
            let g:UltiSnipsSnippetsDir='~/DotFiles/snippets'
            call s:add('ervandew/supertab')
            let g:SuperTabContextDefaultCompletionType = "<c-n>"
            let g:SuperTabDefaultCompletionType = '<C-n>'
            autocmd InsertLeave * if pumvisible() == 0|pclose|endif
            let g:neobundle#install_process_timeout = 1500
            call s:add('Valloric/YouCompleteMe')
            "let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
            "let g:ycm_confirm_extra_conf = 0
            let g:ycm_collect_identifiers_from_tags_files = 1
            let g:ycm_collect_identifiers_from_comments_and_strings = 1
            let g:ycm_key_list_select_completion = ['<C-TAB>', '<Down>']
            let g:ycm_key_list_previous_completion = ['<C-S-TAB>','<Up>']
            let g:ycm_seed_identifiers_with_syntax = 1
            let g:ycm_key_invoke_completion = '<leader><tab>'
            let g:ycm_semantic_triggers =  {
                        \   'c' : ['->', '.'],
                        \   'objc' : ['->', '.'],
                        \   'ocaml' : ['.', '#'],
                        \   'cpp,objcpp' : ['->', '.', '::'],
                        \   'perl' : ['->'],
                        \   'php' : ['->', '::'],
                        \   'cs,javascript,d,python,perl6,scala,vb,elixir,go' : ['.'],
                        \   'java,jsp' : ['.'],
                        \   'vim' : ['re![_a-zA-Z]+[_\w]*\.'],
                        \   'ruby' : ['.', '::'],
                        \   'lua' : ['.', ':'],
                        \   'erlang' : [':'],
                        \ }
        elseif g:settings.autocomplete_method == 'neocomplete' "{{{
            call s:add('Shougo/neocomplete')
            if s:tap('neocomplete')
                call s:defind_hooks('neocomplete.vim')
            endif
        elseif g:settings.autocomplete_method == 'neocomplcache' "{{{
            call s:add('Shougo/neocomplcache.vim')
            if s:tap('neocomplcache.vim')
                call s:defind_hooks('neocomplcache.vim')
            endif
        elseif g:settings.autocomplete_method == 'deoplete'
            call s:add('Shougo/deoplete.nvim')
            if s:tap('deoplete.nvim')
                call s:defind_hooks('deoplete.nvim')
            endif
        endif "}}}
        call s:add('Shougo/neco-syntax')
        call s:add('ujihisa/neco-look')
        call s:add('Shougo/neco-vim')
        if !exists('g:necovim#complete_functions')
            let g:necovim#complete_functions = {}
        endif
        let g:necovim#complete_functions.Ref =
                    \ 'ref#complete'
        call s:add('Shougo/context_filetype.vim')
        call s:add('Shougo/neoinclude.vim')
        call s:add('Shougo/neosnippet-snippets')
        call s:add('Shougo/neosnippet.vim')
        if WINDOWS()
            let g:neosnippet#snippets_directory=g:Vimrc_Home .s:Fsep .'snippets'
        else
            let g:neosnippet#snippets_directory='~/DotFiles/snippets'
        endif
        let g:neosnippet#enable_snipmate_compatibility=1
        let g:neosnippet#enable_complete_done = 1
        let g:neosnippet#completed_pairs= {}
        let g:neosnippet#completed_pairs.java = {'(' : ')'}
        call s:add('Shougo/neopairs.vim')
        if g:neosnippet#enable_complete_done
            let g:neopairs#enable = 0
        endif
        imap <expr><S-TAB> pumvisible() ? "\<C-p>" : ""
        smap <expr><S-TAB> pumvisible() ? "\<C-p>" : ""
    endif "}}}

    if count(g:settings.plugin_groups, 'colorscheme') "{{{
        "colorscheme
        call s:add('morhetz/gruvbox')
        call s:add('kabbamine/yowish.vim')
        call s:add('mhinz/vim-janah')
        call s:add('mhartington/oceanic-next')
        call s:add('nanotech/jellybeans.vim')
        call s:add('altercation/vim-colors-solarized')
        call s:add('kristijanhusak/vim-hybrid-material')
    endif

    if count(g:settings.plugin_groups, 'chinese') "{{{
        call s:add('vimcn/vimcdoc')
    endif

    if count(g:settings.plugin_groups, 'vim') "{{{
        call s:add('Shougo/vimshell.vim')
    endif
    call s:add('tpope/vim-scriptease')
    call s:add('tpope/vim-fugitive')
    call s:add('cohama/agit.vim')
    call s:add('gregsexton/gitv')
    call s:add('tpope/vim-surround')
    call s:add('terryma/vim-multiple-cursors')
    let g:multi_cursor_next_key='<C-j>'
    let g:multi_cursor_prev_key='<C-k>'
    let g:multi_cursor_skip_key='<C-x>'
    let g:multi_cursor_quit_key='<Esc>'

    "web plugins

    call s:lazyadd('groenewege/vim-less', {'autoload':{'filetypes':['less']}})
    call s:lazyadd('cakebaker/scss-syntax.vim', {'autoload':{'filetypes':['scss','sass']}})
    call s:lazyadd('hail2u/vim-css3-syntax', {'autoload':{'filetypes':['css','scss','sass']}})
    call s:lazyadd('ap/vim-css-color', {'autoload':{'filetypes':['css','scss','sass','less','styl']}})
    call s:lazyadd('othree/html5.vim', {'autoload':{'filetypes':['html']}})
    call s:lazyadd('wavded/vim-stylus', {'autoload':{'filetypes':['styl']}})
    call s:lazyadd('digitaltoad/vim-jade', {'autoload':{'filetypes':['jade']}})
    call s:lazyadd('juvenn/mustache.vim', {'autoload':{'filetypes':['mustache']}})
    call s:add('Valloric/MatchTagAlways')
    "call s:lazyadd('marijnh/tern_for_vim', {
    "\ 'autoload': { 'filetypes': ['javascript'] },
    "\ 'build': {
    "\ 'mac': 'npm install',
    "\ 'unix': 'npm install',
    "\ 'cygwin': 'npm install',
    "\ 'windows': 'npm install',
    "\ },
    "\ })
    call s:lazyadd('pangloss/vim-javascript', {'autoload':{'filetypes':['javascript']}})
    call s:lazyadd('maksimr/vim-jsbeautify', {'autoload':{'filetypes':['javascript']}})
    nnoremap <leader>fjs :call JsBeautify()<cr>
    call s:lazyadd('leafgarland/typescript-vim', {'autoload':{'filetypes':['typescript']}})
    call s:lazyadd('kchmck/vim-coffee-script', {'autoload':{'filetypes':['coffee']}})
    call s:lazyadd('mmalecki/vim-node.js', {'autoload':{'filetypes':['javascript']}})
    call s:lazyadd('leshill/vim-json', {'autoload':{'filetypes':['javascript','json']}})
    call s:lazyadd('othree/javascript-libraries-syntax.vim', {'autoload':{'filetypes':['javascript','coffee','ls','typescript']}})

    call s:add('artur-shaik/vim-javacomplete2')
    let g:JavaComplete_UseFQN = 1
    let g:JavaComplete_ServerAutoShutdownTime = 300
    let g:JavaComplete_MavenRepositoryDisable = 0
    call s:add('wsdjeg/vim-dict')
    call s:add('wsdjeg/java_getset.vim')
    if s:tap('java_getset.vim')
        let s:hooks = s:get_hooks('java_getset.vim')
        function! s:hooks.on_source(bundle)
            let g:java_getset_disable_map = 1
        endfunction
    endif
    call s:add('wsdjeg/JavaUnit.vim')
    call s:add('jaxbot/github-issues.vim',{'on_cmd' : 'Gissues'})
    call s:add('wsdjeg/Mysql.vim')
    call s:add('vim-jp/vim-java')
    call s:add('vim-airline/vim-airline')
    call s:add('vim-airline/vim-airline-themes')
    if s:tap('vim-airline')
        call s:defind_hooks('vim-airline')
    endif
    call s:add('mattn/emmet-vim')
    let g:user_emmet_install_global = 0
    let g:user_emmet_leader_key='<C-e>'
    let g:user_emmet_mode='a'
    let g:user_emmet_settings = {
                \  'jsp' : {
                \      'extends' : 'html',
                \  },
                \}
    " use this two command to find how long the plugin take!
    "profile start vim-javacomplete2.log
    "profile! file */vim-javacomplete2/*
    if has('nvim') && g:settings.enable_neomake
        call s:add('wsdjeg/neomake')
        if s:tap('neomake')
            let s:hooks = s:get_hooks('neomake')
            function! s:hooks.on_source(bundle) abort
                let g:neomake_open_list = 2  " 1 open list and move cursor 2 open list without move cursor
                let g:neomake_verbose = 0
            endfunction
        endif
    else
        call s:add('wsdjeg/syntastic')
    endif
    if !filereadable('pom.xml') && !filereadable('build.gradle') && isdirectory('bin')
        let g:syntastic_java_javac_options = '-d bin'
    endif
    let g:syntastic_java_javac_config_file_enabled = 1
    let g:syntastic_java_javac_delete_output = 0
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0
    let g:syntastic_error_symbol = '✖'
    let g:syntastic_warning_symbol = '⚠'
    let g:syntastic_warning_symbol = '➤'
    call s:add('syngan/vim-vimlint', {
                \ 'depends' : 'ynkdir/vim-vimlparser'})
    let g:syntastic_vimlint_options = {
                \'EVL102': 1 ,
                \'EVL103': 1 ,
                \'EVL205': 1 ,
                \'EVL105': 1 ,
                \}
    call s:add('ynkdir/vim-vimlparser')
    call s:add('todesking/vint-syntastic')
    "let g:syntastic_vim_checkers = ['vint']
    call s:add('gcmt/wildfire.vim')
    noremap <SPACE> <Plug>(wildfire-fuel)
    vnoremap <C-SPACE> <Plug>(wildfire-water)
    let g:wildfire_objects = ["i'", 'i"', 'i)', 'i]', 'i}', 'ip', 'it']

    call s:add('scrooloose/nerdcommenter')
    call s:add('easymotion/vim-easymotion')
    call s:add('MarcWeber/vim-addon-mw-utils')
    "NeoBundle 'tomtom/tlib_vim'
    call s:add('mhinz/vim-startify')
    call s:add('mhinz/vim-signify')
    let g:signify_disable_by_default = 0
    let g:signify_line_highlight = 0
    call s:add('airblade/vim-rooter')
    let g:rooter_silent_chdir = 1
    call s:add('Yggdroot/indentLine')
    let g:indentLine_color_term = 239
    let g:indentLine_color_gui = '#09AA08'
    let g:indentLine_char = '¦'
    let g:indentLine_concealcursor = 'niv' " (default 'inc')
    let g:indentLine_conceallevel = 2  " (default 2)
    call s:add('godlygeek/tabular')
    call s:add('benizi/vim-automkdir')
    "[c  ]c  jump between prev or next hunk
    call s:add('airblade/vim-gitgutter')
    call s:add('itchyny/calendar.vim')
    "配合fcitx输入框架,在离开插入模式时自动切换到英文,在同一个缓冲区再次进入插入模式时回复到原来的输入状态
    call s:add('lilydjwg/fcitx.vim')
    call s:add('junegunn/goyo.vim')
    if s:tap('goyo.vim')
        call s:defind_hooks('goyo.vim')
    endif
    "vim Wimdows config
    "NeoBundle 'scrooloose/nerdtree'
    call s:add('tpope/vim-projectionist')
    call s:add('Xuyuanp/nerdtree-git-plugin')
    call s:add('taglist.vim')
    if s:tap('taglist.vim')
        call s:defind_hooks('taglist.vim')
    endif
    call s:add('ntpeters/vim-better-whitespace')
    call s:add('junegunn/rainbow_parentheses.vim')
    augroup rainbow_lisp
        autocmd!
        autocmd FileType lisp,clojure,scheme,java RainbowParentheses
    augroup END
    let g:rainbow#max_level = 16
    let g:rainbow#pairs = [['(', ')'], ['[', ']'],['{','}']]
    " List of colors that you do not want. ANSI code or #RRGGBB
    let g:rainbow#blacklist = [233, 234]
    call s:add('majutsushi/tagbar')
    let g:tagbar_width=30
    let g:tagbar_left = 1
    let g:NERDTreeWinPos='right'
    let g:NERDTreeWinSize=31
    let g:NERDTreeChDirMode=1
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    "noremap <silent> <F3> :NERDTreeToggle<CR>
    noremap <silent> <F3> :VimFiler<CR>
    autocmd FileType nerdtree nnoremap <silent><Space> :call OpenOrCloseNERDTree()<cr>
    noremap <silent> <F2> :TagbarToggle<CR>
    function! OpenOrCloseNERDTree()
        exec "normal A"
    endfunction
    "}}}

    call s:add('wsdjeg/MarkDown.pl')
    call s:add('benjifisher/matchit.zip')
    call s:add('tomasr/molokai')
    call s:add('simnalamburt/vim-mundo')
    nnoremap <silent> <F7> :MundoToggle<CR>
    "call s:add('nerdtree-ack')
    call s:add('L9')
    call s:add('TaskList.vim')
    map <unique> <Leader>td <Plug>TaskList
    call s:add('ianva/vim-youdao-translater')
    vnoremap <silent> <C-l> <Esc>:Ydv<CR>
    nnoremap <silent> <C-l> <Esc>:Ydc<CR>
    noremap <leader>yd :Yde<CR>
    call s:add('elixir-lang/vim-elixir')
    call s:add('tyru/open-browser.vim')
    if s:tap('open-brower.vim')
        call s:defind_hooks('open-brower.vim')
    endif
    call s:end()
endif
filetype plugin indent on
syntax on
"}}}
if count(g:settings.plugin_groups, 'colorscheme')&&g:settings.colorscheme!='' "{{{
    set background=dark
    if g:settings.colorscheme!='' && g:settings.neobundle_installed
        exec 'colorscheme '. g:settings.colorscheme
    else
        exec 'colorscheme '. g:settings.colorscheme_default
    endif
endif

let s:My_vimrc = expand('<sfile>')
function! EditMy_virmc()
    exec "edit ".s:My_vimrc
endf

" source basic setting
call s:source_script('general.vim')

if g:settings.enable_cursorline == 1
    set cursorline                  "显示当前行
endif
if g:settings.enable_cursorcolumn == 1
    set cursorcolumn                "显示当前列
endif

"for vim-fasd.vim
nnoremap <Leader>z :Z<CR>

"for ctrlp-z
let g:ctrlp_z_nerdtree = 1
let g:ctrlp_extensions = ['Z', 'F']
nnoremap sz :CtrlPZ<Cr>
nnoremap sf :CtrlPF<Cr>





call s:source_script('mappings.vim')

"background
noremap <silent><leader>bg :call ToggleBG()<CR>
"numbers
noremap <silent><leader>nu :call ToggleNumber()<CR>

call s:source_script('autocmds.vim')

"functions
"{{{
autocmd FileType python,coffee call s:check_if_expand_tab()
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
    " Overwrite settings.

    " Play nice with supertab
    let b:SuperTabDisabled=1
    " Enable navigation with control-j and control-k in insert mode
    imap <buffer> <C-n>   <Plug>(unite_select_next_line)
    nmap <buffer> <C-n>   <Plug>(unite_select_next_line)
    imap <buffer> <C-p>   <Plug>(unite_select_previous_line)
    nmap <buffer> <C-p>   <Plug>(unite_select_previous_line)


    imap <buffer> jj      <Plug>(unite_insert_leave)
    "imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

    imap <buffer><expr> j unite#smart_map('j', '')
    imap <buffer> <TAB>   <Plug>(unite_select_next_line)
    imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
    imap <buffer> '     <Plug>(unite_quick_match_default_action)
    nmap <buffer> '     <Plug>(unite_quick_match_default_action)
    imap <buffer><expr> x
                \ unite#smart_map('x', "\<Plug>(unite_quick_match_choose_action)")
    nmap <buffer> x     <Plug>(unite_quick_match_choose_action)
    nmap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
    imap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
    imap <buffer> <C-y>     <Plug>(unite_narrowing_path)
    nmap <buffer> <C-y>     <Plug>(unite_narrowing_path)
    nmap <buffer> <C-e>     <Plug>(unite_toggle_auto_preview)
    imap <buffer> <C-e>     <Plug>(unite_toggle_auto_preview)
    nmap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
    imap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
    nnoremap <silent><buffer><expr> l
                \ unite#smart_map('l', unite#do_action('default'))

    let unite = unite#get_current_unite()
    if unite.profile_name ==# 'search'
        nnoremap <silent><buffer><expr> r     unite#do_action('replace')
    else
        nnoremap <silent><buffer><expr> r     unite#do_action('rename')
    endif

    nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')
    nnoremap <buffer><expr> S      unite#mappings#set_current_filters(
                \ empty(unite#mappings#get_current_filters()) ?
                \ ['sorter_reverse'] : [])

    " Runs "split" action by <C-s>.
    imap <silent><buffer><expr> <C-s>     unite#do_action('split')
endfunction
function! s:check_if_expand_tab()
    let has_noexpandtab = search('^\t','wn')
    let has_expandtab = search('^    ','wn')

    "
    if has_noexpandtab && has_expandtab
        let idx = inputlist ( ['ERROR: current file exists both expand and noexpand TAB, python can only use one of these two mode in one file.\nSelect Tab Expand Type:',
                    \ '1. expand (tab=space, recommended)',
                    \ '2. noexpand (tab=\t, currently have risk)',
                    \ '3. do nothing (I will handle it by myself)'])
        let tab_space = printf('%*s',&tabstop,'')
        if idx == 1
            let has_noexpandtab = 0
            let has_expandtab = 1
            silent exec '%s/\t/' . tab_space . '/g'
        elseif idx == 2
            let has_noexpandtab = 1
            let has_expandtab = 0
            silent exec '%s/' . tab_space . '/\t/g'
        else
            return
        endif
    endif

    "
    if has_noexpandtab == 1 && has_expandtab == 0
        echomsg 'substitute space to TAB...'
        set noexpandtab
        echomsg 'done!'
    elseif has_noexpandtab == 0 && has_expandtab == 1
        echomsg 'substitute TAB to space...'
        set expandtab
        echomsg 'done!'
    else
        " it may be a new file
        " we use original vim setting
    endif
endfunction




if filereadable(expand('~/.config/nvim/autoload/plug.vim'))
    call plug#begin('~/.cache/vim-plug')
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/gv.vim'
    "for fzf
    nnoremap <Leader>fz :FZF<CR>
    if !has('nvim')
        Plug 'junegunn/vim-github-dashboard'
    endif
    call plug#end()
endif


"============> plug.vim
set mouse=
set hidden
if has('nvim')
    augroup Terminal
        au!
        au TermOpen * let g:last_terminal_job_id = b:terminal_job_id
        au WinEnter term://* startinsert
    augroup END
    if g:settings.enable_neomake
        augroup Neomake_wsd
            au!
            autocmd! BufWritePost * Neomake
        augroup END
    endif
    call s:source_script('neovim.vim')
endif

func! Openpluginrepo()
    try
        exec "normal! ".'"ayi'."'"
        exec 'OpenBrowser https://github.com/'.@a
    catch
        echohl WarningMsg | echomsg "can not open the web of current plugin" | echohl None
    endtry
endf
call s:source_script('commands.vim')
